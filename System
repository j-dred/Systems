import tkinter as tk
from tkinter.ttk import Combobox
from tkinter.filedialog import askopenfilename, askdirectory
from PIL import Image, ImageTk, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import os
import re
import random
import _sqlite3
import win32api
import smtplib
from email.mine.multipart import MIMEMultipart
form email.mime.text import MIMEText
import my_email

root=tk.Tk()
root.geometry('500x600')
root.title('Student Management and Registration Sysrem')

bg_color='#273b7a'

#login_stud_icon= tk.PhotoImage(file=)
#login_admin_icon= tk.PhotoImage(file=)
#add_stud_icon= tk.PhotoImage(file=)
#locked_icon=tk.PhotoImage(file='images/locked.png')
#unlocked_icon=tk.PhotoImage(file='images/locked.png')

add_student_picture_icon = tk.PhotoImage(file='images/student_profile_img.png')
 

def init_database():

    if os.path.exists('students_accounts.db'):
        
        connection = _sqLite3.connect('students_accounts.db')

        cursor = connection.cursor()
        
        cursor.execute("""
        SELECT * FROM data
        """)

        connection.commit()
        print(cursor.fetchall())
        connection,close()

    else:
        
         connection = sqLite3.connect('students_accounts.db')

         cursor = connection.cursor()
        
         cursor.execute("""
         CREATE TABLE data (
         id_number text,
         password text,
         name text,
         age text,
         gender text,
         phone_number text,
         class text,
         email text,
         image blob
         )       
             """)
        
         connection.commit()
         connection.close()

def check_id_already_exists(id_number):
   connection = sqlite3.connect('students_accounts.db')

   cursor = connection.cursor()

   cursor.execute(f"""
      SELECT id_number FROM data WHERE id_number =='{id_number}'
      """)

   connection.commit()
   response = cursor.fetchall()
   connection.close()

   return response

def check_valid_password(id_number, password):
   connection = sqlite3.connect('students_accounts.db')

   cursor = connection.cursor()

   cursor.execute(f"""
      SELECT id_number, password FROM data WHERE id_number =='{id_number}' AND password == '{password}'
      """)
      
   connection.commit()
   response = cursor.fetchall()
   connection.close()

   return response

def add_data(id_number,password,name,age,gender,phone_number,student_class,email,pic_data):
   
   connection = sqlite3.connect('students_accounts.db')
   cursor = connection.cursor()
   cursor.execute(f"""
    INSERT INTO data VALUES('{id_number}', '{password}', '{name}', '{age}', '{gender}', '{phone_number}', '{student_class}', '{email}', ?)
     """,[pic_data])

   connection.commit()
   connection.close()

def confirmation_box(message):

   answer = tk.BooleanVar()
   answer.set(False)

   def action(ans):
      answer.set(ans)
      confirmation_box_fm.destroy()

   confirmation_box_fm = tk.Frame(root, highlightbackground=bg_color,
                                 highlightthickness=3)
   
   confirmation_box_fm.place(x=100, y=120, wwidth=320, height=220)

   message_lb = tk.Label(confirmation_box_fm, text=message, font=('Bold', 15))
   message_lb.pack(pady=20)

   cancel_btn = tk.Button(confirmation_box_fm, text='Cancel', font=('Bold', 15),
                         bd=0, bg=bg_color, fg='white',
                         command=lambda: action(False))
   cancel_btn.place(x=50, y=160)

   yes_btn = tk.Button(confirmation_box_fm, text='Yes', font=('Bold', 15),
                         bd=0, bg=bg_color, fg='white',
                         command=lambda: action(True))
   yes_btn.place(x=190, y=160, width=80)

   confirmation_box_fm.place(x=100, y=120, wwidth=320, height=220)

   root.wait_window(confirmation_box_fm)
   return.answer.get()

def_message_box(message):
    message_box_fm = tk.Frame(root, highlightbackground=bg_color,
                                 highlightthickness=3)

    close_btn = tk.Button(message_box_fm, text='X', bd=0, font=('Bold', 13),
                         fg=bg_color, command=lambda: message_box_fm.destroy())
    close_btn.place(x=290, y=5)

    message_lb = tk.label(message_box_fm, text= message, font=('Bold', 15))

    message_lb.pack(pady=50)

    message_box_fm.place(x=100, y=120, width=320, height=200)

def student_card_page(student_pic_path, student_data):
   labels="""
ID NUMBER:
Name:
Gender:
Age:
Class:
Contact:
Email:
"""
   student_card = Image.open('images/student_card_frame.png')
   pic = Image.open(student_pic_path),resize((100,100))
   student_card.paste(pic,(15,25))
   draw = ImageDraw.Draw(student_card)

   heading_font = ImageFont.truetype('bahnschrift',18)
   labels_font = ImageFont.truetype('arial',15)
   data_font = ImageFont.truetype('bahnschrift',13)

   draw.text(xy=(150,60),text='Student Card', fill=(0,0,0), font=heading_font)
   draw.multiline_text(xy=(15,120), text=labels,fill=(0,0,0), font=labels_font,spacing=6)


   draw.multiline_text(xy=(95,120), tezt=student_data, fill=(0,0,0), font=data_font, spacing=10)

   return student_card

    
def student_card_page(student_card_obj):

   def save_student_card():
      path = askdirectory()

      if path:
         print(path)

         student_card_obj.save(f'{path}'/student_card.png)

   def print_student_card():
      path = askdirectory()

      if path:
         print(path)

         student_card_obj.save(f'{path}'/student_card.png')

         win32api.ShellExecute(0, 'print', f'{path}/student_card.png', None, '.', 0)
   
   def close_page():
      student_card_frame.destroy()
      root.update()
      studen_login_page()



   student_card_img = ImageTk.PhotoImage(student_card_obj)

   student_card_page_fm = tk.Frame(root,highlightbackground=bg_color,highlightthickness=3)

   heading_lb = tk.Label(student_card_page_fm, text='Student Card'
                          bg=bg_color, fg='white', font=('Bold',18))
   heading_lb.place(x=0, y=0, width=400)
                 

   close_btn = tk.Button(student_card_page_fm, text='X', bg=bg_color,fg='white', font=('Bold',13),bd=0,command=())
   close_btn.place(x=370, y=0)

    
   student_card_lb = tk.Label(student_card_page_fm, image=student_card_img)
   student_card_lb.place(x=50,y=50)

   student_card_lb.image = student_card_img
   student_card_lb.image = card_img
   save_student_card_btn = tk.Butoon(student_card_page_fm, text='Save Student Card', bg=bg_color, fg='white', font=('Bold,15'), bd=1, command=save_student_card)

   save_student_card_btn.place(x=80, y=375)

   print_student_card_btn = tk.Butoon(student_card_page_fm, text='emoji', bg=bg_color, fg='white', font=('Bold,18'), bd=1, command=print_student_card)

   print_student_card_btn.place(x=270, y=370)

   student_card_page_f.place(x=50, y=30, width=400, height=450)

def welcome_page():

   def forward_to_student_login_page():
      welcome_page_fm.destroy()
      root.update()
      student_login_page()

   def forward_to_admin_login_page():
      welcome_page_fm.destroy()
      root.update()
      admin_login_page()

   def forward_to_add_account_page():
      welcome_page_fm.destroy()
      root.update()
      add_account_page()

   welcome_page_fm= tk.Frame(root, highlightbackground=bg_color,
                            highlightthickness=3)

   heading_lb=tk.Label(welcome_page_fm, text='Welcome to Student Register and \n Management',
                        bg=bg_color, fg='white', font=('Bold', 18))

   heading_lb.place(x=0, y=0, width=400)

   student_login_btn= tk.Button(welcome_page_fm, text='Login Student', bg= bg_color,
                                fg='white', font=('Bold', 15), bd=0,
                                command=forward_to_student_login_page)
   student_login_btn.place(x=120, y=125, width=200)

   #studen_login_image = tk.Botton(welcome_page_fm, image=login_stud_icon, bd=0,
                                #command=forward_to_student_login_page)
   #student_login_img.place(x=60, y=100)

   admin_login_btn= tk.Button(welcome_page_fm, text='Login Admin', bg= bg_color,
                              fg='white', font=('Bold', 15), bd=0,
                              command=forward_to_admin_login_page)
   admin_login_btn.place(x=120, y=225, width=200)

   admin_login_img = tk.Button(welcome_page_fm, image=login_admin_icon, bd=0,
                              command=forward_to_admin_login_page)
   admin_login_img.place(x=60, y=200)

   add_student_btn= tk.Button(welcome_page_fm, text='Create Account', bg= bg_color,
                              fg='white', font=('Bold', 15), bd=0
                              command=forward_to_admin_login_page)
   add_student_btn.place(x=120, y=325, width=200)

   #add_stud_img= tk.Button(welcome_page_fm, image=add_stud_icon bd=0
                            #command=forward_to_admin_login_page)
   #add_stud_img.place(x=60, y=300)

   welcome_page_fm.pack(pady=30)
   welcome_page_fm.pack_propagate(False)
   welcome_page_fm.configure(width=400, height=420)
def sendmail_to_student(email, message, subject):
    smtp_servey =  'smtp.gmail.com'
    smtp_part = 587
    username = my_email_address
    password = my_email.password
    msg =  MIMEMultipart()

    msg['Subject'] = subject
    msg['From'] =  username
    msg['To'] = email

    msg.attach(MIMEText(_text=message,_subtype='html'))

    smtp_connection = smtplib.SMTP(host=smtp_server, part=smtp_port)
    smtp_connection.starttls()
    smtp_connection.login(user=username, password=password)

    smtp_connection.sendemail(form_addr=username, to_addrs=email, msg= mmsg.as_string())

    print('Mail Sent Successful.')
def forget_password_page():
    def recover_password():
        if check_id_already_exists(id_number=student_id_ent_get()):
           print('correct ID')

           connection = sqLite3.connect('students_accounts.db')
           cursor.execute("""
           SELECT password FROM data WHERE id_nummber=='{student_id_ent_get}'
         """) 
         connection.commit()
         recovered_password = cursor.fetchall()[0][0]
         
         cursor.execute("""
         SELECT password FROM data WHERE id_nummber=='{student_id_ent_get}'
            """) 
         connection.commit()   
         student_email=cursor.fetchall[0][0]     
         connection.close()
         cinfirmation =  confirmation_box(message=f""" We Will Send/n Your Forgot Passworc 
         Via Your Email Address:
         {student_email}
         Do You Want to Continue?""")
       
         if confirmation:
           msg = """"<h1>Your Forgot Password is :</H1><H2>{recoverd password}
           <?h2>
           <p>Once Remember Your Password, After Delete This Message<?p>"""
           sendmail_to_student(email=student_email, message=msg, subject='Password Recovery')
     
     
        else:
           print('Incorrect ID')
           message_box(message='!Invalid ID Number')

   forget_password_page_fm = tk.Frame(root, highlightbackground=bg_color,highlightthickness=3)
   heading_lb = tk.Label(forget_password_page_fm, text='Forgetting Password', FONT=('Bold', 15), bg=bg_color, fg='white')

   heading_lb.place(x=0, y=0, width=350)
   close_btn = tk.Button(forget_password_page_fm, text='X', font=('Bold',13), bg=bg_color, fg='white',bd=0, command=lambda:forget_password_page_fm.destroy())
   close_btn.place(x=320, y=0)

   student_id_lb = tk.Label(forget_password_page_fm, text= 'Enter Student ID Number.', font = ('Bold',13))
   student_id_lb.place(x=70,y=40)

   student_id_ent = tk.Entry(foget_password_page_fm, font=('Bold', 15), justify=tk.CENTER)

   student_id_ent.place(x=70, y=70, width=180)

   info_lb = tk.Label(forget_password_page_fm, text="""Via Your Email Address 
   We Will Send To You
   Your Forgot Password. """ justify=tk.LEFT)

   info_lb.place(x=75, y=110)

   next_btn = tk.Butoon(forget_password_page_fm, text='Next', font=('Bold',13), bg=bg_color, fg='white' command=recover_password)

   next_btn.place('x=130, y=200, width=80')

   forget_password_page_fm.place(x=75,y=120, width=350, height=250) 
 
   def fetch_student_data(query):
        
      connection = sqlite3.connect('students_accpunt')

      cursor = connection.cursor

      cursor.execute(query)
      connection.commit()
      response = cursor.fetchall()

      connection.close()

      return response

   def student_dashboard(student_id):
        
        
      get_student_datails = fetch_student_data("""
      SELECT name,age,gender,class,phone_number,email FROM data WHERE id_number =={student_id}
""")
      
      get_student_pic = fetch_student_data("""
      SELECT image FROM data WHERE id_number =={student_id}
""")
      

      student_pic = BytesIO(get_student_pic[0][0])
      print(student_pic)
     
   def switch(indicator, page):
      home_btn_indicator.config(bg='#c3c3c3')
      student_card_btn_indicator.config(bg='#c3c3c3')
      security_btn_indicator.config(bg='#c3c3c3')
      edit_data_btn_indicator.config(bg='#c3c3c3')
      delete_account_btn_indicator.config(bg='#c3c3c3')

      indicator.config(bg=bg_color)
      for child in pages_fm.winfo_children()
         child.destroy()
         root.update()
       
      page()

    dashboard_fm =  tk.Frame(root, highlightbackground=bg_color, highlightthickness=3)

    options_fm = tk.Frame(dashboard_fm,highlightbackground=bg_color, highlightthickness=2, bg='#c3c3c3')

    home_btn=tk.Button(options_fm,text='Home', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0, command=lambda: 
    switch(indicator=home_btn_indicator, page=home_page))
    home_btn.place(x=10, y=50)

    home_btn_indicator = tk.Label(options_fm, bg=bg_color)
    home_btn_indicator.place(x=5, y=48, width=3, height=40)
    
    student_card_btn=tk.Button(options_fm,text='Student\nCard', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0, justify=tk.LEFT), command=lambda:
    switch(indicator=student_card_btn_indicator, page=dashboard_student_card_page)
    student_card_btn(x=10, y=100)

    student_card_btn_indicator = tk.Label(options_fm, bg='c3c3c3')
    student_card_btn_indicator.place(x=5, y=108, width=3, height=40)
    

    security_btn=tk.Button(options_fm,text='Security', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0,command=lambda:
    switch(indicator=security_btn_indicator, page=security_page))
    security_btn(x=10, y=170)

    security_btn_indicator = tk.Label(options_fm, bg='c3c3c3'
    security_btn_indicator.place(x=5, y=170, width=3, height=40)
    

    edit_data_btn=tk.Button(options_fm,text='Edit Data', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0), command=lambda:
    switch(indicator=edit_data_btn_indicator, page=edit_data_page)
    edit_data_btn(x=10, y=220)

    edit_data_btn_indicator = tk.Label(options_fm, bg='c3c3c3')
    edit_data_btn_indicator.place(x=5, y=220, width=3, height=40)
    

    delete_account_btn=tk.Button(options_fm,text='Delete\nAccount', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0, justify=tk.LEFT), command=lambda:
    switch(indicator= delete_account_btn_indicator,page=delete_account_page))
    delete_account_btn(x=10, y=270)

    delete_account_btn_indicator = tk.Label(options_fm, bg='c3c3c3')

    delete_account_btn_indicator.place(x=5, y=280, width=3, height=40)

    

    logout_btn=tk.Button(options_fm,text='Logout', font=('Bold',15), fg=bg_color, bg='c3c3c3', bd=0,)

    logout_btn(x=10, y=340)


    options_fm.place(x=0, y=0, width=120, height=575)

    def home_page():
        
        student_pic_image_obj = Image.open(student_pic)
        size = 100
        mask = Image.new(mode='L', size=(size,size))

        draw_circle = ImageDraw.Draw(im=mask)

        draw_circle.ellipse(xy =(0,0,size,size), fill=255, outline=True)

        output = ImageOps.fit(image=student_pic_image_obj, size=mask.size, centering=(1,1))

        output.putalpha(mask)

        student_picture = ImageTk.PhtoImage(output)

        home_page_fm =  tk.Frame(pages_fm)
        
        student_pic_lb = tk.Label(home_page_fm, image=student_picture )
        student_pic_lb.image = student_picture
        student_pic_lb.image = pic_img_obj
        student_pic_lb.place(x=10, y=10)
        hi_lb = tk.Label(home_page_fm, text=f'!Hi{get_student_details[0][0]}', font=('Bold', 15))
        hi_lb.place(x=130, y=50)

        student_details = f'''
    STUDENT ID: {student_id}/n
    Name:{get_student_details[0][0]}/n
    Age:{get_student_details[0][1]}/n
    Gender:{get_student_details[0][2]}/n
    Class:{get_student_details[0][3]}/n
    Contact:{get_student_details[0][4]}/n
    Email:{get_student_details[0][5]}/n

    '''

        student_details_lb = tk.Label(home_page_fm, text='student_details, font=('Bold', 13), justify=tk.LEFT)
        student_details_lb.place(x=20, y=130)
        home_page_fm.pack(fill= tk.BOTH, expand=True)
        
def dashboard_student_card_page():
    student_details = f"""
    {student_id}
get_student_details[0][0]
get_student_details[0][2]
get_student_details[0][1]
get_student_details[0][3]
get_student_details[0][4]
get_student_details[0][5]
"""

        student_card_image_obj = draw_student_card(student_pic_path=student_pic_path, student_data=student_details)

        def save_student_card():
        path = askdirectory()

        if path:
             print(path)

             student_card_obj.save(f'{path}'/student_card.png)

     def print_student_card():
        path = askdirectory()

        if path:
             print(path)

             student_card_obj.save(f'{path}'/student_card.png)

             win32api.ShellExecute(0, 'print', f'{path}/student_card.png', None, '.', 0)

             student_card_img = ImageTk.PhotoImage(student_card_image_obj)
             student_card_fm =  tk.Frame(pages_fm)
             card_lb = tk.Label(student_card_page_fm, image=student_card_img)
             card_lb.image = student_card_img
             card_lb.place(x=20,y=50 )

             save_student_card_lb_btn = tk.Button(student_card_page_fm, text='Save Student Card', font=('Bold', 15), bd=1, fg='white', bg=bg_color, command=save_student_card)
             save_student_card_btn.place(x=40, y= 400)

             print_student_card_lb_btn = tk.Button(student_card_page_fm, text='EMOJI', font=('Bold', 15), bd=1, fg='white', bg=bg_color,command=print_student_card)
             print_student_card_btn.place(x=240, y= 400)

             security_card_fm.pack(fill= tk.BOTH, expand=True)

        def security_page():
          security_page_fm =  tk.Frame(pages_fm)
          security_page_lb= tk.Label(home_page_fm, text='Security page fm', font=('Bold', 15))
          security_page_fm_lb_place(x=100, y=200)
          student_page_fm.pack(fill= tk.BOTH, expand=True)

            
        def edit_data_page():
            edit_data_fm =  tk.Frame(pages_fm)

            edit_data_lb= tk.Label(home_page_fm, text='Edit Data Page', font=('Bold', 15))
            edit_data_place_fm_lb(x=100, y=200)
            edit_data_fm.pack(fill= tk.BOTH, expand=True)
            
        def delete_account_page():
            delete_account_fm =  tk.Frame(pages_fm)

            delete_account_lb= tk.Label(home_page_fm, text='Delete Account', font=('Bold', 15))
            delete_account_place_fm_lb(x=100, y=200)
            delete_account_fm.pack(fill= tk.BOTH, expand=True)
            


        
        pages_fm = tk.Frame(dashboard_fm)
        pages_fm.place(x=122, y=5, width=350, height=550)
       
        dashboard_student_card_page()

        dashboard_fm.pack(pady=5)
        dashboard_fm.pack_propagate(False)
        dashboard_fm.configure(width=480, height=580)

def student_login_page():

   def show_hide_password():
      if password_ent['show']== '*':
         password_ent.config(show='')
         show_hide_btn.config(image=unlocked_icon)

      else:
         password_ent.config(show='')
         show_hide_btn.config(image=locked_icon)

   def forward_to_welcome_page():
      student_login_page_fm.destroy()
      root.update()
      welcome_page()

   def forward_to_fotget_password_page():
       forget_password_page()

   def remove_highlight_warning(entry):
         if entry['highlightbackground'] != 'gray':
           if entry.get() != '':
               entry.config(highlightcolor=bg_color,
                            highlightbackground='gray')

   def lgin_account();
      verify_id_number = check_id_already_exists(id_number=id_number_ent.get())

      if verify_id_number:
         print('ID is Correct')

         verify_password = check_valid_password(id_number=id_number_ent.get(),password=password_ent.get())

         if verify_password:
            id_number = id_number=id_number_ent.get()
            student_login_page_fm.destroy()
            student_dashboard(student_id=id_number)
            root.update()

         else:
            print('!oopss Password is Incorrect')
            password_ent.onfig(highlightcolor='red',
                             highlightbackground='red')

            message_box(message='Incorrect Password')

      else:
         print('!oopss ID is Incorrect')

         id_number_ent.onfig(highlightcolor='red',
                             highlightbackground='red')

         message_box(message='Please Enter Valid Student ID')

      student_login_page_fm= tk.Frame(root, highlightbackground=bg_color,
                                     highlightthickness=3 )

      heading_lb= tk.Label(student_login_page_fm, text='Student Login Page', bg=bg_color,
                           fg='white', font=('Bold', 18))
      heading_lb.place(x=0, y=0, width=400)

      back_btn = tk.Button(student_login_page_fm, =text'', font=('Bold', 20),
                           fg=bg_color, bd=0, command=def_forward_to_welcome_page)
      back_btn.place(x=5, y=40)

   #stud_icon_lb = tk.Label(student_login_page_fm, image=login_stud_icon)
   #stud_icon_lb.place(x=150, y=40)

      id_number_lb=tk.Label(student_login_page_fm, text='Enter Student ID Number',
                           font=('bold', 15), fg=bg_color)
      id_number_lb.place(x=80, y=140)

      id_number_ent= tk.Entry(student_login_page_fm, font=('Bold', 15),
                             justify=tk.CENTER, highlightcolor=bg_color,
                             highlightbackground='gray', highlightthickness=2)
      id_number_ent.place(x=80, y=190)
      id_number_ent.bind('<Keyrelease>', lambda e: remove_highlight_warning(entry=id_number_ent))

      password_lb= tk.Label(student_login_page_fm, text='Enter Student Passwoed',
                           font=('Bold', 15), fg=bg_color)
      password_lb.place(x=80, y=240)

      password_ent= tk.Entry(student_login_page_fm, font=('Bold', 15),
                             justify=tk.CENTER, highlightcolor=bg_color,
                             highlightbackground='gray', highlightthickness=2,
                             show='*')
      password_ent.place(x=80, y=290)
      password_ent.bind('<Keyrelease>', lambda e: remove_highlight_warning(entry=password_ent))

      show_hide_btn= tk.Button(student_login_page_fm, image=locked_icon, bd=0,
                              command=show_hide_password )
      show_hide_btn.place(x=310, y=280)
   
      login_btn=tk.Button(student_login_page_fm, text='Login',
                         font=('Bold', 15), bg=bg_color, fg='White', command=login_account)
      login_btn.place(x=95, y=340, width=200, height=40)

      forget_password_btn= tk.Button(student_login_page_fm, text='⚠️\nForgot Password',
                                   fg=bg_color, bd=0, command=forget_password_page)
      forget_password_btn.place(x=150, y=390)

      student_login_page_fm.pack(pady=30)
      student_login_page_fm.pack_propagate(False)
      student_login_page_fm.configure(width=400, height=450)

      def admin_login_page():

   def show_hide_password():
         if password_ent['show']== '*':
            password_ent.config(show='')
            show_hide_btn.config(image=unlocked_icon)

         else:
            password_ent.config(show='')
            show_hide_btn.config(image=locked_icon)

   def_forward_to_welcome_page():
      admin_login_page_fm.destroy()
      root.update()
      welcome_page()

   admin_login_page_fm = tk.Frame(root, highlightbackground=bg_color,
                                 highlightthickness=3 )

   heading_lb= tk.Label(admin_login_page_fm, text='Admin Login Page',
                       font=('Bold', 18), bg=bg_color, fg='white')
   heading_lb.place(x=0, y=0, width=400)

   back_btn = tk.Button(admin_login_page_fm, text'', font=('Bold', 20),
                       fg=bg_color, bd=0, command=def_forward_to_welcome_page)
   back_btn.place(x=5, y=40)

   admin_icon_lb=tk.Label(admin_login_page_fm, image=login_admin_icon)
   admin_icon_lb.place(x=150, y=40)

   username_lb=tk.Label(admin_login_page_fm, text='Enter Admin Username',
                         font=('bold', 15), fg=bg_color)
   username_lb.place(x=80, y=140)

   username_ent= tk.Entry(admin_login_page_fm, font=('Bold', 15),
                         justify=tk.CENTER, highlightcolor=bg_color,
                         highlightbackground='gray', highlightthickness=2)
   username_ent.place(x=80, y=190)

   password_lb= tk.Label(admin_login_page_fm, text='Enter Admin Passwoed',
                         font=('Bold', 15), fg=bg_color)
   password_lb.place(x=80, y=240)

   password_ent= tk.Entry(admin_login_page_fm, font=('Bold', 15),
                         justify=tk.CENTER, highlightcolor=bg_color,
                         highlightbackground='gray', highlightthickness=2,
                         show='*')
   password_ent.place(x=80, y=290)

   show_hide_btn= tk.Button(admin_login_page_fm, image=locked_icon, bd=0,
                             command=show_hide_password )
   show_hide_btn.place(x=310, y=280)

   login_btn=tk.Button(admin_login_page_fm, text='Login',
                       font=('Bold', 15), bg=bg_color, fg='White')
   login_btn.place(x=95, y=340, width=200, height=40)

   admin_login_page_fm.pack(pady=30)
   admin_login_page_fm.pack_propagate(False)
   admin_login_page_fm.configure(width=400, height=430)

    student_gender = tk.StringVar()
    class_list = ['5th', '6th', '7th', '8th', '9th', '10th', '11th', '12th']
    

    def add_account_page():

      pic_path = tk.StringVar()
      pic_path.set('')

      def open picture():
      path = askopenfilename()

      if path:
            
            image = ImageTk.PhotoImage(Image.open(path).resize((100, 100)))
            pic_path.set(path)

            add_picture_btn.config(image=img)
            add_picture_btn.image = img

      def forward_to_welcome_page():
         ans = confirmation_box(message= 'Do You Want To Leave\nRegistration Foam?')

      if ans: 
         add_account_page_fm.destroy()
         root.update() 
         welcome_page()

      def remove_highlight_warning(entry):
         if entry['highlightbackground'] != 'gray':
           if entry.get() != '':
               entry.config(highlightcolor=bg_color,
                            highlightbackground='gray')

      def check_invalid_email(email):
         pattern = "^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[_a-z0-9-]+(\.[_a-z0-9-]+)*(\._[a-z]{2,4})$"
         
         match = re.match(pattern=pattern, string=email)
         return match

      def generate_id_number():
         
         generated_id =''

         for r in range(6):
             
             generated_id += str(random.randint(0,9))
             
         if not check_id_already_exists(id_number=generated_id):

           print('id number:', generated_id)

           student_id.config(state=tk.NORMAL)
           student_id.delete(0,tk.END)
           student_id.insert(tk.END,generated_id)
           student_id.config(state='readonly')

         else:
             generate_id_number()

      def check_input_Validation():
         if student_name_ent.get() == '':
            student_name_ent.config(highlightcolor='red',
                                  highlightbackground='red')
            student_name_ent.focus()
            message_box('Student Full Name is Required')

         elif student_age_ent.get() == '':
            student_age_ent.config(highlightcolor='red',
                                  highlightbackground='red')
            student_age_ent.focus()
            message_box(message='Enter Student Age Required')

         elif student_contact_ent.get() == '':
            student_contact_ent.config(highlightcolor='red',
                                  highlightbackground='red')
            student_contact_ent.focus()
            message_box(message='Student Contact Number is Required')

         elif select_class_btn.get() == '':
            select_class_btn.focus()
            message_box(message='Select Student Class Required')

         elif student_email_lb.get() == '':
            student_email_lb.config(highlightcolor='red',
                                  highlightbackground='red')
            student_email_lb.focus()
            message_box(message='Student Email Address Required')
         elif not check_invalid_email(email=student_email_ent.get().lower()):
            student_email_lb.config(highlightcolor='red',
                                  highlightbackground='red')
            student_email_lb.focus()
            message_box(message='Please Enter a Valid\nEmail Address')

         elif account_password_ent.get() == '':
            account_password_ent..config(highlightcolor='red',
                                  highlightbackground='red')
            account_password_ent.focus()
            message_box(message='Create Password is Required')

         else:
            
              pic_data = b''

              if pic_path.get() != '':
                 resize_pic = Image.open(pic_path.get()).resize((100,100))
                 resize_pic.save('temp_pic.png')
                 

                 read_data = open('temp_pic.png', 'rb')
                 pic_data = read_data.read()
                 read_data.close()
                 else:
                 read_data = open('images/student_profile_img.png', 'rb')
                 pic_data = read_data.read()
                 read_data.close()
                 pic_path.set('images/student_profile_img.png')

    add_data(id_number=student_id.get(),
                          password=account_password_ent.get(),
                          name=student_name_ent.get(),
                          age=student_age_ent.get(),
                          gender=student_gender_ent.get(),
                          phone_number=student_contact_ent.get(),
                          student_class=select_class_btn.get(),
                          email=student_email_ent.get(),
                          pic_data=pic_data)
        

   message_box('Account Successful Created')
    
   data = """"
   {student_id.get()}
   {student_name.get()}
   {student_age_ent.get()}
   {student_contact_ent.get()}
   {select_class_btn.get()}
   {student_email_ent.get()}
   
"""
   get_student_card = draw_student_card(student_pic_path=pic_path.get(),student_data=data)
   student_card_page(student_card_obj= get_student_card)
   add_account_page_fm.destroy()
   root.update()

   message_box('Account Successful Created')
   add_account_page_fm = tk.Frame(root, highlightbackground=bg_color,
                                 highlightthickness=3)

   add_picture_section_ = tk.Frame(add_account_page_fm, highlightbackground=bg_color,
                                 highlightthickness=2)

   add_picture_btn = tk.Button(add_picture_section_fm, image=add_student_picture_icon,
                             command=open_picture)    
   add_picture_btn.pack()                                    	

   add_picture_section_fm.place(x=5, y=5, width=105, height=105)

   student_name_lb = tk.Label(add_acount_page_fm, text='Enter Student Full Name.',
                              font=('Bold', 12))
   student_name_lb.place(x=5, y=130)

   student_name_ent = tk.Entry(add_account_page_fm, font=('Bold', 15),
                              highlightcolor=bg_color, highlightbackground='gray',
                              highlightthickness=2)
   student_name_ent.place(x=5, y=160, width=180)
   student_name_ent.bind('<KeyRelease>', 
                         lambda e: remove_highlight_warning(entry=student_name_ent))

   student_gender_lb = tk.Label(add_account_page_fm, text='Select Student Gender.',
                              font=('Bold', 12))
   student_gender_lb.place(x=5, y=210)

   male_gender_btn = tk.Radiobutton(add_account_page_fm, text='Male',
                                   font=('Bold', 12), variable=student_gender,
                                   value='Male')
   male_gender_btn.place(x=5, y=235)

   female_gender_btn = tk.Radiobutton(add_account_page_fm, text='Female',
                                     font=('Bold', 12), variable=student_gender,
                                     value='Female')
   female_gender_btn.place(x=75, y=235)

   student_gender.set('male')

   student_age_lb = tk.Label(add_account_page_fm, text='Enter Student Age.',
                             font=('Bold', 12))
   student_age_lb.place(x=5, y=275)

   student_age_ent = tk.Entry(add_account_page_fm, font=('Bold', 15),
                              highlightcolor=bg_color, highlightbackground='gray',
                              highlightthickness=2)
   student_age_ent.place(x=5, y=305, width=180)
   student_age_ent.bind('<KeyRelease>', 
                         lambda e: remove_highlight_warning(entry=student_age_ent))

   student_contact_lb = tk.Label(add_account_page_fm, text='Enter Contact Phone Number.',
                              font=('Bold', 12))
   student_contact_lb.place(x=5, y=360)

   student_contact_ent = tk.Entry(add_account_page_fm, font=('Bold', 15),
                              highlightcolor=bg_color, highlightbackground='gray',
                              highlightthickness=2)
   student_contact_ent.place(x=5, y=390, width=180)
   student_contact_ent.bind('<KeyRelease>', 
                         lambda e: remove_highlight_warning(entry=student_contact_ent))

   student_class_lb = tk.Label(add_account_page_fm, text='Select Student Class.',
                              font=('Bold', 12))
   student_class_lb.place(x=5, y=445)

   select_class_btn = Combobox(add_account_page_fm, font=('Bold', 15),
                              state='readonly', values=class_list) 
   select_class_btn.place(x=5, y=475, width=180, height=30)

   student_id_lb = tk.Label(add_account_page_fm, text='Student ID Number:',
                              font=('Bold', 12)) 
   student_id_lb.place(x=240, y=35)

   student_id_ent = tk.Label(add_account_page_fm, font=('Bold', 18), bd=0)
   student_id.place(x=380, y=35, width=80)

   

   student_id_config(state='readonly')

   generate_id_number()

   id_info_lb = tk.Label(add_account_page_fm, text="""Automatically Generated ID Number
! Remeber Using ID Number
Studen will Login Account.""", justify=tk.LEFT)
   id_info_lb.place(x=240, y=65)

   student_email_lb = tk.Label(add_account_page_fm, text='Enter Student Email Address.',
                              font=('Bold', 12))
   student_email_lb.place(x=240, y=130)

   student_email_ent = tk.Entry(add_account_page_fm, font=('Bold', 15),
                              highlightcolor=bg_color, highlightbackground='gray',
                              highlightthickness=2)
   student_email_ent.place(x=240, y=160, width=180)
   student_email_ent.bind('<KeyRelease>', 
                         lambda e: remove_highlight_warning(entry=student_email_ent))

   email_info_lb = tk.Label(add_account_page_fm, text="""Via Email Address Student
Can Recover Account
! In Case Forgetting Password And Also
Student will get Future Notifications.""", justify=tk.LEFT)
   email_info_lb.place(x=240, y=200)

   account_password_lb = tk.Label(add_account_page_fm, text='Create Account Password,',
                                 font=('Bold', 12))
   account_password_lb.place(x=240, y=275)

   account_password_ent = tk.Entry(add_account_page_fm, font=('Bold', 15),
                                  highlightcolor=bg_color, highlightbackground='gray',
                                  highlightthickness=2)
   account_password_ent.place(x=240, y=307 width=180)
   account_password_ent.bind('<KeyRelease>', 
                         lambda e: remove_highlight_warning(entry=account_password_ent))

   account_password_info_lb = tk.Label(add_account_page_fm, text="""Via Student Create Password
And Provide Student ID Number
Student Can Login Account.""", justify=tk.LEFT)
   account_password_info_lb.place(x=240, y=345)

   home_btn = tk.Button(add_account_page_fm, text='Home', font=('Bold', 15), 
                         bg='red', fg='white', bd=0
                         command=forward_to_welcome_page)
   home_btn.place(x=240, y=420)

   submit_btn = tk.Button(add_account_page_fm, text='Submit', font=('Bold', 15), 
                         bg=bg_color, fg='white', bd=0, command=check_input_validation)
   submit_btn.place(x=360, y=420)

   add_account_page_fm.pack(pady=5)
   add_account_page_fm.pack_propagate(False)
   add_account_page_fm.configure(width=480, height=580)


init_database()
#welcome_page()
#student_login_page()
student_dashboard(student_id=143133)
root.mainloop()

